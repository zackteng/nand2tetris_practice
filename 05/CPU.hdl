// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A寄存器存取
    Mux4Way16(a=instruction, b=instruction, c=outA, d=outALU, sel[0]=instruction[5], sel[1]=instruction[15], out=outInA); // 确定是从指令设置A寄存器的值还是从内存读取还是保持A寄存器的值
    Not(in=instruction[15], out=instructionA);
    Or(a=instructionA, b=instruction[5], out=loadA); // i位域和d位域
    Register(in=outInA, load=loadA, out=outA, out[0..14]=addressM); // A Register

    // D寄存器存取
    And(a=instruction[15], b=instruction[4], out=loadD);
    Register(in=outALU, load=loadD, out=outD); // D Register

    // A寄存器里的值作为数字还是地址参与处理
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAorM); // a位域

    // ALU处理逻辑
    Mux(a=false, b=instruction[6], sel=instruction[15], out=no);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=f);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=ny);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=zy);
    Mux(a=true, b=instruction[10], sel=instruction[15], out=nx);
    Mux(a=true, b=instruction[11], sel=instruction[15], out=zx);
    ALU(x=outD, y=outAorM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=outALU, zr=zr, ng=ng);

    // 更新PC逻辑
    Or(a=zr, b=ng, out=orZrNg);
    Not(in=orZrNg, out=norZrNg);
    And(a=norZrNg, b=instruction[0], out=jumpGt);
    And(a=zr, b=instruction[1], out=jumpEq);
    And(a=ng, b=instruction[2], out=jumpLt);
    Or(a=jumpGt, b=jumpEq, out=jumpGE);
    Or(a=jumpGE, b=jumpLt, out=jumpAll);
    And(a=instruction[15], b=jumpAll, out=jump);
    Not(in=jump, out=inc);
    PC(in=outA, load=jump, inc=inc, reset=reset, out[0..14]=pc); // PC Register

    // 是否写入RAM 需要是C指令且M的d位域为1
    And(a=instruction[15], b=instruction[3], out=writeM);
}